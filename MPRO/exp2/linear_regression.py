# -*- coding: utf-8 -*-
"""linear regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YM6XJJNtb9cbfXfDUNYm7xn_tE-5gWyb
"""

from sklearn import preprocessing
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn import linear_model
import quandl
import numpy as np
from math import sqrt

def prepare_data(df,forecast_col,forecast_out,test_size):
    label = df[forecast_col].shift(-forecast_out);#creating new column called label with the last 5 rows are nan
    X = np.array(df[[forecast_col]]) #creating the feature array
    X = preprocessing.scale(X) #processing the feature array
    X_lately = X[-forecast_out:] #creating the column i want to use later in the predicting method
    X = X[:-forecast_out] # X that will contain the training and testing
    label.dropna(inplace=True) #dropping na values
    y = np.array(label)  # assigning Y
    X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=test_size, random_state=0) #cross validation 

    response = [X_train,X_test , Y_train, Y_test , X_lately]
    return response

df = quandl.get('WIKI/AMZN')

df.head()

forecast_col = 'Close'
forecast_out = 5 
test_size = 0.2

X_train, X_test, y_train, y_test , X_lately =prepare_data(df,forecast_col,forecast_out,test_size)

learner = linear_model.LinearRegression()

learner.fit(X_train,y_train) 

#y_pred= learner.predict(X_test)
#print('Mean Squared Error: {}'.format(mean_squared_error(y_test, y_pred)))

forecast = learner.predict(X_lately)
score=learner.score(X_test,Y_test)


print(score, forecast)

